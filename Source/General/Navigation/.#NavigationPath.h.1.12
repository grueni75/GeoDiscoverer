//============================================================================
// Name        : NavigationPath.h
// Author      : Matthias Gruenewald
// Copyright   : Copyright 2010 Matthias Gruenewald
//
// This file is part of GeoDiscoverer.
//
// GeoDiscoverer is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// GeoDiscoverer is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with GeoDiscoverer.  If not, see <http://www.gnu.org/licenses/>.
//
//============================================================================


#ifndef NAVIGATIONPATH_H_
#define NAVIGATIONPATH_H_

namespace GEODISCOVERER {

class NavigationPath {

protected:

  std::string name;                               // The name of the path
  std::string description;                        // The description of this path
  std::string gpxFilefolder;                      // Filename of the gpx file that stores this path
  std::string gpxFilename;                        // Folder where the gpx file is stored
  MapPosition lastPoint;                          // The last point added
  bool hasLastPoint;                              // Indicates if the path already has its last point
  MapPosition secondLastPoint;                    // The point added before the last point
  bool hasSecondLastPoint;                        // Indicates if the path already has its second last point
  std::list<MapPosition> mapPositions;            // List of map positions the path consists of
  GraphicColor color;                             // Color of the path
  bool hasChanged;                                // Indicates if the path has changed
  bool isStored;                                  // Indicates if the path has been written to disk
  bool hasBeenLoaded;                             // Indicates if the path has just been read from disk
  Int pathMinSegmentLength;                       // Minimum segment length of tracks, routes and other paths
  Int pathMinDirectionDistance;                   // Minimum distance between two direction arrows of tracks, routes and other paths
  //Int pathArrowHeight;                            // Height of the arrow drawn in each segment of paths
  //Int pathArrowSideWidth;                         // Width of each side of the arrow drawn in each segment of paths

  // Finds nodes in a xml tree
  std::list<XMLNode> findNodes(XMLDocument document, XMLXPathContext xpathCtx, std::string path);

  // Returns the text contents of a element node
  bool getText(XMLNode node, std::string &contents);

  // Extracts information about the path from the given node set
  void extractInformation(std::list<XMLNode> nodes);

public:

  // Constructor
  NavigationPath();

  // Destructor
  virtual ~NavigationPath();

  // Replaces the last point by a new one
  void replaceEndPosition(MapPosition pos, bool posIsStable);

  // Adds a point to the path
  void addEndPosition(MapPosition pos, bool posIsStable);

  // Creates a graphic line object for drawing the path
  GraphicObject *createGraphicObject(MapPosition mapPos, MapArea area);

  // Stores a the object contents in a gpx file
  void writeGPXFile();

  // Reads the path contents from a gpx file
  bool readGPXFile();

  // Getters and setters
  void setGpxFilefolder(std::string gpxFilefolder)
  {
      this->gpxFilefolder = gpxFilefolder;
  }

  std::string getGpxFilefolder() const
  {
      return gpxFilefolder;
  }

  std::string getGpxFilename() const
  {
      return gpxFilename;
  }

  void setGpxFilename(std::string gpxFilename)
  {
      this->gpxFilename = gpxFilename;
  }


  bool getHasSecondLastPoint() const
  {
      return hasSecondLastPoint;
  }

  GraphicColor getColor() const
  {
      return color;
  }

  void setColor(GraphicColor color)
  {
      this->color = color;
  }

  MapPosition getSecondLastPoint() const
  {
      return secondLastPoint;
  }

  std::string getDescription() const
  {
      return description;
  }

  std::string getName() const
  {
      return name;
  }

  void setDescription(std::string description)
  {
      this->description = description;
  }

  void setName(std::string name)
  {
      this->name = name;
  }

  bool getHasLastPoint() const
  {
      return hasLastPoint;
  }

  MapPosition getLastPoint() const
  {
      return lastPoint;
  }

  bool getHasChanged() const
  {
      return hasChanged;
  }

  void resetHasChanged()
  {
      this->hasChanged = false;
  }

  static const MapPosition getPathInterruptedPos()
  {
      return MapPosition();
  }

  bool getHasBeenLoaded() const
  {
      return hasBeenLoaded;
  }

  void setHasBeenLoaded(bool hasBeenLoaded)
  {
      this->hasBeenLoaded = hasBeenLoaded;
  }

};

}

#endif /* NAVIGATIONPATH_H_ */
