buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
    }
}

plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

def computeVersionName() {
    def date = new Date()
    return date.format('yyyyMMdd')
}

ext {
    supportLibVersion = '28.0.0'
    brouterVersion = '1.6.1'
}

allprojects {
    repositories {
        jcenter()
        maven {
            url "https://maven.google.com"
        }
        maven {
            url "https://jitpack.io"
        }
    }
}

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.2"
    ndkVersion "21.1.6352462"
    useLibrary 'org.apache.http.legacy'

    buildFeatures {
        // Enables Jetpack Compose for this module
        compose true
    }

    defaultConfig {
        applicationId "com.untouchableapps.android.geodiscoverer"
        minSdkVersion 23
        targetSdkVersion 23
        versionCode 28
        versionName computeVersionName()
        vectorDrawables {
            useSupportLibrary true
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            project.ext.set('releaseAppABI', 'all32')
        }
        debug {
            project.ext.set('debugAppABI', 'arm64-v8a')
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "GeoDiscovererMobile${variant.name.capitalize()}${variant.versionName}.apk";
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    splits {
        abi {
            enable gradle.startParameter.taskNames.any { it.contains("Debug") }
            reset()
            include 'armeabi-v7a'
            universalApk false
        }
    }

    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.0.5'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation files("../../../../../ThirdParty/brouter/brouter-server/target/brouter-server-${brouterVersion}.jar")
    implementation files("../../../../../ThirdParty/brouter/brouter-core/target/brouter-core-${brouterVersion}.jar")
    implementation files("../../../../../ThirdParty/brouter/brouter-mapaccess/target/brouter-mapaccess-${brouterVersion}.jar")
    implementation files("../../../../../ThirdParty/brouter/brouter-codec/target/brouter-codec-${brouterVersion}.jar")
    implementation files("../../../../../ThirdParty/brouter/brouter-expressions/target/brouter-expressions-${brouterVersion}.jar")
    implementation files("../../../../../ThirdParty/brouter/brouter-map-creator/target/brouter-map-creator-${brouterVersion}.jar")
    implementation files("../../../../../ThirdParty/brouter/brouter-util/target/brouter-util-${brouterVersion}.jar")
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'
    wearApp project(':wear')
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation project(':core')
    implementation project(':colorPickerPreference')
    implementation 'com.google.android.gms:play-services-wearable:11.8.0'
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'
    implementation 'com.afollestad.material-dialogs:commons:0.9.6.0'
    implementation 'org.nanohttpd:nanohttpd:2.3.1'
    def acraVersion = '5.2.1'
    implementation "ch.acra:acra-mail:$acraVersion"
    implementation "ch.acra:acra-notification:$acraVersion"
    implementation fileTree(dir: '../../../../../ThirdParty/mapsforge/mapsforge-core/build/libs', include: ['*.jar'])
    implementation fileTree(dir: '../../../../../ThirdParty/mapsforge/mapsforge-map/build/libs', include: ['*.jar'])
    implementation fileTree(dir: '../../../../../ThirdParty/mapsforge/mapsforge-map-reader/build/libs', include: ['*.jar'])
    implementation fileTree(dir: '../../../../../ThirdParty/mapsforge/mapsforge-themes/build/libs', include: ['*.jar'])
    implementation fileTree(dir: '../../../../../ThirdParty/mapsforge/mapsforge-map-android/build/libs', include: ['*.jar'])
    implementation fileTree(dir: '../../../../../ThirdParty/mapsforge/mapsforge-poi-android/build/libs', include: ['*.jar'])
    implementation fileTree(dir: '../../../../../ThirdParty/mapsforge/mapsforge-poi/build/libs', include: ['*.jar'])
    implementation 'net.sf.kxml:kxml2:2.3.0'
    implementation 'com.caverock:androidsvg:1.4'
    implementation 'androidx.activity:activity-compose:1.3.1'
    implementation 'androidx.compose.material:material:1.0.5'
    implementation 'androidx.compose.animation:animation:1.0.5'
    implementation 'androidx.compose.ui:ui-tooling:1.0.5'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:1.0.0-alpha07'
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.0.5'
}

task collectAssets(type: Exec) {
    workingDir 'src/main'
    commandLine '../../../collect_assets', 'mobile'
}
preBuild.dependsOn collectAssets

android.buildTypes.all { buildType ->
    def setNativeCodeConfigTask = task("set${buildType.name.capitalize()}NativeCodeConfig", type: Exec) {
        commandLine 'echo', "${buildType.name}"
        doFirst {
            standardOutput = new FileOutputStream("core/src/main/mode.txt");
        }
    }
    def resetNativeCodeConfigTask = task("reset${buildType.name.capitalize()}NativeCodeConfig", type: Exec) {
        commandLine 'echo', "all"
        doFirst {
            standardOutput = new FileOutputStream("core/src/main/mode.txt");
        }
    }

    tasks.whenTaskAdded { task ->
        if (task.name == "check${buildType.name.capitalize()}Manifest") {
            task.dependsOn setNativeCodeConfigTask
        }
        if (task.name == "compile${buildType.name.capitalize()}Ndk") {
            task.dependsOn resetNativeCodeConfigTask
        }
    }
}

android.applicationVariants.all { variant ->
    if (variant.buildType.name == 'debug') {
        variant.outputs.each { output ->
            def taskSuffix = variant.name.capitalize()
            def assembleTaskName = "assemble${taskSuffix}"
            if (tasks.findByName(assembleTaskName)) {
                def copyAPKTask = tasks.create(name: "publish${taskSuffix}", type: Copy) {
                    from "${rootDir}/mobile/build/outputs/apk/debug/${output.outputFile.name}"
                    into "${rootDir}/export/debug"
                    onlyIf {
                        if (inputs.sourceFiles.empty) {
                            ant.fail("Cannot find APK ${output.outputFile.name} to publish!")
                            return false;
                        } else
                            return true;
                    }
                }
                tasks[assembleTaskName].finalizedBy = [copyAPKTask]
            }
        }
    }
}
