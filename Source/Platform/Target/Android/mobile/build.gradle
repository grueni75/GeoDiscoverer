apply plugin: 'com.android.application'

def computeVersionName() {
    def date = new Date()
    return date.format('yyyyMMdd')
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.untouchableapps.android.geodiscoverer"
        minSdkVersion 9
        targetSdkVersion 22
        versionCode 21
        versionName computeVersionName()
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            project.ext.set('releaseAppABI', 'all32')
        }
        debug {
            project.ext.set('debugAppABI', 'armeabi-v7a')
        }
    }

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs' // use the jni .so compiled from the manual ndk-build command
        jni.srcDirs = [] //disable automatic ndk-build call
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (variant.name == "release") {
                output.outputFile = new File(
                        output.outputFile.parent,
                        "GeoDiscoverer${variant.versionName}.apk")
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //wearApp project(':wear')
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.android.support:support-v4:22.2.0'
    compile 'com.android.support:design:22.2.0'
    compile 'com.android.support:recyclerview-v7:22.2.0'
    compile 'com.android.support:gridlayout-v7:22.2.0'
    compile project(':materialDialogs')
    compile project(':colorPickerPreference')
}

task collectAssets(type: Exec) {
    workingDir 'src/main'
    commandLine './collect_assets'
}
preBuild.dependsOn collectAssets

android.buildTypes.all{ buildType ->
    def collectSymbolsTask = task("collect${buildType.name.capitalize()}Symbols", type: Exec) {
        workingDir 'src/main'
        commandLine './collect_symbols', 'obj'
    }
    def buildNativeCodeTask = task("build${buildType.name.capitalize()}NativeCode", type: Exec) {
        workingDir 'src/main'
        commandLine 'ndk-build', 'APP_ABI=' + project.ext.get("${buildType.name}AppABI")
    }
    collectSymbolsTask.dependsOn buildNativeCodeTask
    tasks.whenTaskAdded { task ->
        if (task.name == "preDex${buildType.name.capitalize()}") {
            task.dependsOn collectSymbolsTask
        }
    }
}

