apply plugin: 'com.android.library'

def computeVersionName() {
    def date = new Date()
    return date.format('yyyyMMdd')
}

ext {
    supportLibVersion = '27.1.0'
}

android {
    compileSdkVersion 27
    buildToolsVersion "30.0.2"
    ndkVersion "21.1.6352462"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 22
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            project.ext.set('releaseAppABI', 'all')
        }
        debug {
            project.ext.set('debugAppABI', 'armeabi-v7a')
        }
    }

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs' // use the jni .so compiled from the manual ndk-build command
        //disable automatic ndk-build call
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    implementation "com.android.support:appcompat-v7:${supportLibVersion}"
    implementation 'com.google.android.gms:play-services-wearable:11.8.0'
}

allprojects {
    repositories {
        jcenter()
        maven {
            url "https://maven.google.com"
        }
    }
}

android.buildTypes.all{ buildType ->
    def collectSymbolsTask = task("collect${buildType.name.capitalize()}Symbols", type: Exec) {
        workingDir 'src/main'
        commandLine './collect_symbols', 'obj'
    }
    def buildNativeCodeTask = task("build${buildType.name.capitalize()}NativeCode", type: Exec) {
        workingDir 'src/main'
        commandLine './build_native', "${buildType.name}", 'APP_ABI=' + project.ext.get("${buildType.name}AppABI")
    }
    collectSymbolsTask.dependsOn buildNativeCodeTask
    tasks.whenTaskAdded { task ->
        if (task.name == "compile${buildType.name.capitalize()}JavaWithJavac") {
            task.dependsOn collectSymbolsTask
        }
    }
}
