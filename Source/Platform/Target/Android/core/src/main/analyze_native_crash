#!/usr/bin/perl
use Data::Dumper;
use MIME::Base64;
use JSON;

# Get args
die "Usage: analyze_native_crash <ACRA stack trace | binary crash dump>" if (@ARGV != 1);
my $report = shift;
my $lib = shift;

# Extract the breakpad dump
my $dump = "";
my $arch = "armeabi-v7a";
if ($report !~ m/.dmp$/) {
  print "Extracting native dump from crash report... ";
  open my $input, '<', $report or die "Cannot open <$report> for reading!";
  my $json = <$input>;
  close $input;
  my $decoded_json = decode_json( $json );
  #print Dumper($decoded_json);
  $arch = $decoded_json->{'BUILD'}->{'CPU_ABI'};
  $dump = $decoded_json->{'CUSTOM_DATA'}->{'nativeZipContents'};
  #print $arch . "\n";
  #print $dump;
  print "Done!\n";
}

# Translate the cpu architecture
print $arch . "\n";
if ($arch eq 'arm64-v8a') {
  $arch='arm64';
} elsif ($arch eq 'armeabi-v7a') {
  $arch='arm-v7a';
} elsif ($arch eq 'armeabi') {
  $arch='arm';
} else {
  die "CPU architecture $arch not supported!";
}
#print $arch . "\n";

# Decode the dump and write it to disk
if ($report !~ m/.dmp$/) {
  print "Decoding native dump... ";
  #print($dump);
  my $decoded_dump = decode_base64($dump);
  open (my $out, ">/tmp/crash.bin") or die "Can not open </tmp/crash.dmp> for writing!";
  print $out $decoded_dump;
  close($out);
  print "Done!\n";
} else {
  system("cp \"" . $report . "\" /tmp/crash.bin");
}

# Check if the bin file is a zip file
my $status = system("unzip -t /tmp/crash.bin >/dev/null");
if ($status == 0) {
  print "Extracting log files to /tmp/crash...\n";
  system("rm -rf /tmp/crash >/dev/null 2>&1");
  mkdir "/tmp/crash";
  system("cd /tmp/crash/; unzip /tmp/crash.bin");
  system("cp /tmp/crash/crash.dmp /tmp/crash.bin");
}
 
# Output the stack trace
system("minidump_stackwalk /tmp/crash.bin sym/$arch 2>/dev/null");


