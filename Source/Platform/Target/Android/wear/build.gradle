plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

def computeVersionName() {
    def date = new Date()
    return date.format('yyyyMMdd')
}

android {
    compileSdkVersion 33
    ndkVersion "21.1.6352462"

    buildFeatures {
        // Enables Jetpack Compose for this module
        compose true
    }

    defaultConfig {
        applicationId "com.untouchableapps.android.geodiscoverer"
        minSdkVersion 26
        targetSdkVersion 26
        versionCode 28
        versionName computeVersionName()
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            project.ext.set('releaseAppABI', 'all32')
        }
        debug {
            project.ext.set('debugAppABI', 'armeabi-v7a')
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "GeoDiscovererWear${variant.name.capitalize()}${variant.versionName}.apk";
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
    }

    splits {
        abi {
            enable gradle.startParameter.taskNames.any { it.contains("Debug") }
            reset()
            include 'armeabi-v7a'
            universalApk false
        }
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.4.3'
    }
  namespace 'com.untouchableapps.android.geodiscoverer'
}

dependencies {
    implementation "androidx.compose.runtime:runtime:1.1.0"
    implementation "androidx.activity:activity-compose:1.4.0"
    implementation "androidx.compose.ui:ui-tooling-preview:1.1.0"
    implementation "androidx.wear.compose:compose-material:1.0.0-alpha16"
    implementation "androidx.compose.material:material-icons-extended:1.1.0"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2'
    implementation "androidx.wear:wear:1.2.0"
    implementation "androidx.wear.watchface:watchface:1.1.1"
    implementation 'com.google.android.gms:play-services-wearable:17.1.0'
    implementation project(':core')
}

task collectAssets(type: Exec) {
    workingDir 'src/main'
    commandLine '../../../collect_assets', 'wear'
}
preBuild.dependsOn collectAssets

android.buildTypes.all { buildType ->
    def setNativeCodeConfigTask = task("set${buildType.name.capitalize()}NativeCodeConfig", type: Exec) {
        commandLine 'echo', "${buildType.name}"
        doFirst {
            standardOutput = new FileOutputStream("core/src/main/mode.txt");
        }
    }
    def resetNativeCodeConfigTask = task("reset${buildType.name.capitalize()}NativeCodeConfig", type: Exec) {
        commandLine 'echo', "all"
        doFirst {
            standardOutput = new FileOutputStream("core/src/main/mode.txt");
        }
    }
    tasks.whenTaskAdded { task ->
        if (task.name == "check${buildType.name.capitalize()}Manifest") {
            task.dependsOn setNativeCodeConfigTask
        }
        if (task.name == "compile${buildType.name.capitalize()}Ndk") {
            task.dependsOn resetNativeCodeConfigTask
        }
    }
}

android.applicationVariants.all { variant ->
    if (variant.buildType.name == 'debug') {
        variant.outputs.each { output ->
            def taskSuffix = variant.name.capitalize()
            def assembleTaskName = "assemble${taskSuffix}"
            if (tasks.findByName(assembleTaskName)) {
                def copyAPKTask = tasks.create(name: "publish${taskSuffix}", type: Copy) {
                    from "${output.outputFile.parent}/${output.outputFile.name}"
                    into "${rootDir}/export/debug"
                    onlyIf {
                        if (inputs.sourceFiles.empty) {
                            ant.fail("Cannot find APK ${output.outputFile.name} to publish!")
                            return false;
                        } else
                            return true;
                    }
                }
                tasks[assembleTaskName].finalizedBy = [copyAPKTask]
            }
        }
    }
}
